// Copyright (c) 2025 Nils ten Hoeve, licensed under the 3-Clause BSD License
import 'package:dart_code/dart_code.dart';
import 'package:dart_style/dart_style.dart';

///a tree model that represents DartCode
abstract class CodeNode {
  @override
  String toString() => toUnFormattedString(Imports());

  /// Converts the [CodeNode] to an unformatted String.
  /// It should not throw parsing exceptions.
  String toUnFormattedString(Imports imports);

  /// Converts the [CodeNode] to a formatted String, using the constructor parameters.
  /// Using the official (dartfmt)[https://github.com/dart-lang/dart_style/wiki/Formatting-Rules] with the dart_style package
  /// Note that this formatter may throw parsing exceptions.
  /// You can use the [toUnFormattedString] method when you need a code partial that can not be parsed by the Dart formatter
  String toFormattedString(
      {String? lineEnding,
      int? pageWidth,
      int? indent,
      List<String>? experimentFlags}) {
    var dartFormatter = DartFormatter(
      languageVersion: DartFormatter.latestLanguageVersion,
      lineEnding: lineEnding,
      pageWidth: pageWidth,
      indent: indent,
      experimentFlags: experimentFlags,
    );
    var unFormattedCode = toUnFormattedString(Imports());
    return dartFormatter.format(unFormattedCode);
  }
}

/// a String representing a piece of Dart code
class Code extends CodeNode {
  final String code;

  Code(this.code);

  @override
  String toUnFormattedString(Imports imports) {
    return code;
  }
}

/// A (tree) model that represents Dart Code.
/// It contains a list of [CodeNode]s that is generated by using the constructor parameters, fields and or properties of the implementation of [CodeModel]
/// [CodeNode]s can be:
/// - [CodeLeaf]s that can be converted to a string
/// - Other [CodeModel]s that represent part of the code (e.g. a Library, Class, Annotation, Function, Method, Block, Statement, etc)
abstract class CodeModel extends CodeNode {
  List<CodeNode> codeNodes(Imports imports);

  /// Recursive call to get the unformatted code from all nodes
  @override
  String toUnFormattedString(Imports imports) {
    StringBuffer buffer = StringBuffer();
    for (CodeNode codeNode in codeNodes(imports)) {
      String unformattedCode = codeNode.toUnFormattedString(imports);
      buffer.write(unformattedCode);
    }
    return buffer.toString();
  }
}

/// A [CodeNodeWithLibraryUri] wraps an sub class.
/// It adds a LibraryUri alias as defined in the [Imports]
/// See: [https://dart.dev/guides/language/language-tour#libraries-and-visibility]
abstract class CodeModelWithLibraryUri extends CodeModel {
  final String? libraryUri;

  CodeModelWithLibraryUri({this.libraryUri});

  @override
  List<CodeNode> codeNodes(Imports imports) => [
        if (libraryUri != null) imports.aliasOf(libraryUri!),
        if (libraryUri != null) Code('.'),
        ...codeNodesToWrap(imports),
      ];

  ///Hook
  List<CodeNode> codeNodesToWrap(Imports imports);
}
