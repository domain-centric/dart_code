import 'basic.dart';
import 'code_formatter.dart';

class Context {
  Imports imports;
  final String newLine;
  final String indent;
  final String wrapIndent;
  int indentCount = 0;
  int maxLineLength;
  String lastCode='';

  Context(CodeNode codeNode,
      {this.indent='  ', this.wrapIndent='    ', this.newLine, this.maxLineLength}) {
    imports = Imports(codeNode, this);
  }


}

///a tree model that represents DartCode
abstract class CodeNode {
  @override
  String toString() {
    return CodeFormatter().format(this);
  }
}

/// a part of a the Dart code model that can be converted to a string
abstract class CodeLeaf extends CodeNode {
  String convertToString(Context context);
}

/// A (tree) model that represents Dart Code.
/// It contains a list of [CodeNode]s that is generated by using the constructor parameters, fields and or properties of the implementation of [CodeModel]
/// [CodeNode]s can be:
/// - [CodeLeaf]s that can be converted to a string
/// - Other [CodeModel]s that represent part of the code (e.g. a Library, Class, Annotation, Function, Method, Block, Statement, etc)
abstract class CodeModel extends CodeNode {
  List<CodeNode> codeNodes(Context context);
}

/// a String representing a piece of Dart code
class Code extends CodeLeaf {
  final String code;

  Code(this.code);

  @override
  String convertToString(Context context) {
    return code;
  }
}